
/*

    Синглтон — это шаблон (паттерн) проектирования, который делает две вещи:
1. Дает гарантию, что у класса будет всего один экземпляр класса.
2. Предоставляет глобальную точку доступа к экземпляру данного класса.

    Отсюда — две особенности, характерные для практически каждой реализации паттерна синглтон:
1. Приватный конструктор. Ограничивает возможность создания объектов класса за пределами самого класса.
2. Публичный статический метод, который возвращает экземпляр класса.
Данный метод называют getInstance. Это глобальная точка доступа к экземпляру класса.

 */
public class Singleton {

    private Singleton() {
    }

    private static Singleton singleton;

    private static final Singleton INSTANCE = new Singleton();

    // Simple Solution
    /*
      Самая простая реализация.
        Плюсы:
        Простота и прозрачность кода
        Потокобезопасность
        Высокая производительность в многопоточной среде

        Минусы:
        Не ленивая инициализация.
    */
    public static Singleton getIns() {
        return INSTANCE;
    }


    // Lazy Initialization - когда некоторая ресурсоёмкая операция (создание объекта, вычисление значения)
    // выполняется непосредственно перед тем, как будет использован её результат.
    // Таким образом, инициализация выполняется «по требованию», а не заблаговременно.
    /*
    * Плюсы:
      Ленивая инициализация.
      Минусы:
      Не потокобезопасно */
    public static Singleton getInstance() {
        if (singleton == null)
            singleton = new Singleton();

        return singleton;
    }

    // Synchronized Accessor
    /*
    * Плюсы:
    Ленивая инициализация.
    Потокобезопасность

    Минусы:
    Низкая производительность в многопоточной среде
    */
    public static synchronized Singleton getSynchronizedInstance() {
        if (singleton == null)
            singleton = new Singleton();

        return singleton;
    }


    // Double Checked Locking
    /*
    * Плюсы:
    Ленивая инициализация.
    Потокобезопасность
    Высокая производительность в многопоточной среде

    Минусы:
    Не поддерживается на версиях Java ниже 1.5 (в версии 1.5 исправили работу ключевого слова volatile)

    Отмечу, что для корректной работы данного варианта реализации обязательно одно из двух условий.
    Переменная INSTANCE должна быть либо final, либо volatile.
    * */
    public static Singleton getDoubleCheckedInstance() {
        if (singleton == null)
            synchronized (Singleton.class){
            if (singleton == null)
                singleton = new Singleton();
            }

        return singleton;
    }

    // Class Holder Singleton
    /*
    Плюсы:
    Ленивая инициализация.
    Потокобезопасность.
    Высокая производительность в многопоточной среде.

    Минусы:
    Для корректной работы необходима гарантия, что объект класса Singleton инициализируется без ошибок.
    Иначе первый вызов метода getInstance закончится ошибкой ExceptionInInitializerError, а все последующие NoClassDefFoundError.

    Реализация практически идеальная. И ленивая, и потокобезопасная, и быстрая.
    Но есть нюанс, описанный в минусе.
    */
    private static class SingletonHolder {
        public static final Singleton H0LDER_INSTANCE = new Singleton();
    }
    public static Singleton getHolderInstance() {
        return SingletonHolder.H0LDER_INSTANCE;
    }

}

/*
    Плюсы и минусы паттерна Singleton
    В целом синглтон делает именно то, что от него ждут:
        1. Дает гарантию, что у класса будет всего один экземпляр класса.
        2. Предоставляет глобальную точку доступа к экземпляру данного класса.

    Однако у этого шаблона есть недостатки:
        1. Синглтон нарушает SRP (Single Responsibility Principle) — класс синглтона, помимо непосредственных обязанностей,
        занимается еще и контролированием количества своих экземпляров.
        2. Зависимость обычного класса или метода от синглтона не видна в публичном контракте класса.
        3. Глобальные переменные это плохо. Синглтон превращается в итоге в одну здоровенную глобальную переменную.
        4. Наличие синглтона снижает тестируемость приложения в целом и классов, которые используют синглтон, в частности.

*/